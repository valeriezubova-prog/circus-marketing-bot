"""
Entry point for the Circus and Marketing bot.

Sets up aiogram Dispatcher, registers handlers and runs long polling.
Suitable for Render.com or local runs.
"""

import asyncio
import os
import re
from typing import List, Tuple

from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardMarkup,
    InputMediaPhoto,
    Message,
)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from dotenv import load_dotenv

from . import content
from .storage import PhotoStore

# ---- Setup & config ---------------------------------------------------------

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_USERNAMES = {
    u.strip().lower() for u in os.getenv("ADMIN_USERNAMES", "").split(",") if u.strip()
}
STORAGE_PATH = os.getenv("STORAGE_PATH", "/data/bot.db")

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is not set")

# aiogram 3.7+: parse_mode –∑–∞–¥–∞—ë—Ç—Å—è —á–µ—Ä–µ–∑ default=DefaultBotProperties(...)
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN))
dp = Dispatcher()
store = PhotoStore(STORAGE_PATH)

# Hotfix 1: –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ –æ—Å—Ç–∞–ª–∏—Å—å —Ç–∏–ª—å–¥—ã –∑–∞—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è –∏–∑ MarkdownV2 ‚Äî —É–±–µ—Ä—ë–º
CLEAN_START_TEXT = (content.START_TEXT or "").replace("~~", "")

# Hotfix 2: –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –ø—Ä–∞–≤–∏–º username —É –ü–æ–ª–∏–Ω—ã (–µ—Å–ª–∏ –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ –æ–Ω –∏–Ω–æ–π)
_fixed_people = []
for item in content.PEOPLE:
    if len(item) != 7:
        _fixed_people.append(item)
        continue
    slug, name, title, desc, team, leader, tg = item
    if slug == "polina-tikhonenko":
        tg = "polina_tikhonenko"  # ‚Üê –Ω—É–∂–Ω—ã–π –ª–æ–≥–∏–Ω —Å –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏–µ–º
    _fixed_people.append((slug, name, title, desc, team, leader, tg))
content.PEOPLE = _fixed_people  # type: ignore


# ---- Keyboards --------------------------------------------------------------

def main_menu_kb() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text="üë• –õ—é–¥–∏", callback_data="menu:people")
    kb.button(text="üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data="menu:materials")
    kb.button(text="üìù –ö–∞–∫ —Å—Ç–∞–≤–∏—Ç—å –∑–∞–¥–∞—á–∏", callback_data="menu:tasking")
    kb.button(text="‚ùì FAQ", callback_data="menu:faq")
    kb.button(text="üîç –ü–æ–∏—Å–∫", callback_data="menu:search")
    kb.adjust(2, 2, 1)
    return kb.as_markup()


def people_list_kb() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    for slug, name, *_ in content.PEOPLE:
        kb.button(text=name, callback_data=f"person:{slug}")
    kb.button(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="menu:home")
    kb.adjust(1)
    return kb.as_markup()


# ---- Rendering helpers ------------------------------------------------------

def person_card_caption(
    name: str, title: str, desc: str, team: str, leader: str, tg_user: str
) -> str:
    """Markdown caption for a person's card (—ç–∫—Ä–∞–Ω–∏–º –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è)."""
    def esc(s: str) -> str:
        return s.replace("_", "\\_")

    cap = (
        f"*{esc(name)}*\n_{esc(title)}_\n\n"
        f"{desc}\n\n"
        f"*–ö–æ–º–∞–Ω–¥–∞:* {esc(team)}\n"
        f"*–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å:* {esc(leader)}"
    )
    cap += f"\n\n[–ù–∞–ø–∏—Å–∞—Ç—å –≤ Telegram](https://t.me/{tg_user})"
    return cap


def faq_text() -> str:
    lines = ["*FAQ*"]
    for q, label, url in content.FAQ:
        lines.append(f"‚Ä¢ *{q}*\n  üëâ [{label}]({url})")
    return "\n\n".join(lines)


def materials_text() -> str:
    lines = ["> –≤—Å—ë, —á—Ç–æ —á–∞—â–µ –≤—Å–µ–≥–æ –∏—â—É—Ç (–∏ —Å–ø—Ä–∞—à–∏–≤–∞—é—Ç —É –Ω–∞—Å –≤ –ø–∞–Ω–∏–∫–µ üî•):"]
    for label, url in content.MATERIALS:
        lines.append(f"‚Ä¢ [{label}]({url})")
    return "\n".join(lines)


def tasking_text() -> str:
    return content.TASKING_TEXT


# ---- Search helpers ---------------------------------------------------------

def search_people(query: str) -> List[str]:
    """Return slugs of people matching the search query."""
    q = query.lower()
    hits: List[str] = []
    for slug, name, title, desc, team, leader, tg in content.PEOPLE:
        hay = " ".join([name, title, desc, team, leader, tg]).lower()
        if q in hay:
            hits.append(slug)
    return hits[:20]


def search_materials(query: str) -> List[Tuple[str, str]]:
    """Return (label, url) where query occurs in label."""
    q = query.lower()
    hits: List[Tuple[str, str]] = []
    for label, url in content.MATERIALS:
        if q in label.lower():
            hits.append((label, url))
    return hits[:20]


def is_admin(msg: Message) -> bool:
    if not msg.from_user or not msg.from_user.username:
        return False
    return msg.from_user.username.lower() in ADMIN_USERNAMES


# ---- Handlers ---------------------------------------------------------------

@dp.message(Command("start"))
async def cmd_start(message: Message) -> None:
    await message.answer(
        f"*{content.BOT_NAME}*\n\n{CLEAN_START_TEXT}",
        reply_markup=main_menu_kb(),
    )


@dp.callback_query(F.data == "menu:home")
async def cb_home(callback: CallbackQuery) -> None:
    await callback.message.edit_text(
        f"*{content.BOT_NAME}*\n\n{CLEAN_START_TEXT}",
        reply_markup=main_menu_kb(),
    )


@dp.callback_query(F.data == "menu:people")
async def cb_people(callback: CallbackQuery) -> None:
    await callback.message.edit_text("–≤—ã–±–∏—Ä–∞–π –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:", reply_markup=people_list_kb())


@dp.callback_query(F.data == "menu:materials")
async def cb_materials(callback: CallbackQuery) -> None:
    kb = InlineKeyboardBuilder()
    kb.button(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="menu:home")
    await callback.message.edit_text(materials_text(), reply_markup=kb.as_markup())


@dp.callback_query(F.data == "menu:tasking")
async def cb_tasking(callback: CallbackQuery) -> None:
    kb = InlineKeyboardBuilder()
    kb.button(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="menu:home")
    await callback.message.edit_text(tasking_text(), reply_markup=kb.as_markup())


@dp.callback_query(F.data == "menu:faq")
async def cb_faq(callback: CallbackQuery) -> None:
    kb = InlineKeyboardBuilder()
    kb.button(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="menu:home")
    await callback.message.edit_text(faq_text(), reply_markup=kb.as_markup())


@dp.callback_query(F.data == "menu:search")
async def cb_search(callback: CallbackQuery) -> None:
    kb = InlineKeyboardBuilder()
    kb.button(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="menu:home")
    await callback.message.edit_text(
        "–Ω–∞–ø–∏—à–∏ –º–Ω–µ –∏–º—è, —Ä–æ–ª—å –∏–ª–∏ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ ‚Äî —è –Ω–∞–π–¥—É —á–µ–ª–æ–≤–µ–∫–∞ –∏–ª–∏ –º–∞—Ç–µ—Ä–∏–∞–ª. "
        "–ú–æ–∂–Ω–æ —Ç–∞–∫: `–ø–æ–∏—Å–∫ <–∑–∞–ø—Ä–æ—Å>` –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ —Å–ª–æ–≤–æ.",
        reply_markup=kb.as_markup(),
    )


# –°—Ç–∞—Ä—ã–π ¬´–∫–æ–º–∞–Ω–¥–Ω—ã–π¬ª –ø–æ–∏—Å–∫: "–ø–æ–∏—Å–∫ —á—Ç–æ-—Ç–æ"
@dp.message(F.text.regexp(r"^\s*–ø–æ–∏—Å–∫\s+(.+)$"))
async def text_search(message: Message) -> None:
    query = re.findall(r"^\s*–ø–æ–∏—Å–∫\s+(.+)$", message.text, flags=re.I)[0]
    await run_combined_search(message, query)


# –ù–æ–≤—ã–π ¬´—É–º–Ω—ã–π¬ª —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –ª—é–±–æ–º—É —Ç–µ–∫—Å—Ç—É
@dp.message(F.text)
async def smart_text_lookup(message: Message) -> None:
    q = (message.text or "").strip()
    if not q or q.startswith("/"):
        return
    # –ü—Ä–æ—Å—Ç—ã–µ —Å–∏–Ω–æ–Ω–∏–º—ã
    synonyms = {
        "–±–±—É–∫": "–±—Ä–µ–Ω–¥–±—É–∫",
        "–≥–∞–π–¥–±—É–∫": "–±—Ä–µ–Ω–¥–±—É–∫",
        "–≥–∞–π–¥": "–≥–∞–π–¥",
        "—à—Ä–∏—Ñ—Ç—ã": "—à—Ä–∏—Ñ—Ç",
        "—Ü–≤–µ—Ç–∞": "—Ü–≤–µ—Ç",
    }
    for k, v in synonyms.items():
        if k in q.lower():
            q = v
            break
    await run_combined_search(message, q)


async def run_combined_search(message: Message, query: str) -> None:
    """–°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –∑–∞—Ç–µ–º –ª—é–¥–µ–π; –µ—Å–ª–∏ –ø—É—Å—Ç–æ ‚Äî –ø–æ–¥—Å–∫–∞–∑–∫–∞."""
    # 1) –ú–∞—Ç–µ—Ä–∏–∞–ª—ã
    mats = search_materials(query)
    if mats:
        lines = ["*–Ω–∞—à–ª–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:*"]
        for label, url in mats:
            lines.append(f"‚Ä¢ [{label}]({url})")
        await message.answer("\n".join(lines))
        return

    # 2) –õ—é–¥–∏
    slugs = search_people(query)
    if slugs:
        kb = InlineKeyboardBuilder()
        for slug in slugs:
            name = next(p[1] for p in content.PEOPLE if p[0] == slug)
            kb.button(text=name, callback_data=f"person:{slug}")
        kb.button(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="menu:home")
        kb.adjust(1)
        await message.answer("–Ω–∞—à–ª–∞ –ª—é–¥–µ–π:", reply_markup=kb.as_markup())
        return

    # 3) –ü–æ–¥—Å–∫–∞–∑–∫–∞
    await message.answer(
        "–Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∞. –ø–æ–ø—Ä–æ–±—É–π –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–≥–∞–π–¥¬ª, ¬´–±—Ä–µ–Ω–¥–±—É–∫¬ª, ¬´—à—Ä–∏—Ñ—Ç—ã¬ª) "
        "–∏–ª–∏ –Ω–∞–∂–º–∏ ¬´üîç –ü–æ–∏—Å–∫¬ª –∏ –≤–≤–µ–¥–∏ `–ø–æ–∏—Å–∫ <—Å–ª–æ–≤–æ>`."
    )


@dp.callback_query(F.data.startswith("person:"))
async def cb_person(callback: CallbackQuery) -> None:
    slug = callback.data.split(":", 1)[1]
    person = next((p for p in content.PEOPLE if p[0] == slug), None)
    if not person:
        await callback.answer("–∫–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    _, name, title, desc, team, leader, tg_user = person
    caption = person_card_caption(name, title, desc, team, leader, tg_user)

    file_id = await store.get_file_id(slug)

    kb = InlineKeyboardBuilder()
    kb.button(text="‚¨ÖÔ∏è –õ—é–¥–∏", callback_data="menu:people")
    kb.button(text="üè† –í –º–µ–Ω—é", callback_data="menu:home")
    kb.adjust(2)

    if file_id:
        try:
            if callback.message.photo:
                await callback.message.edit_media(
                    InputMediaPhoto(media=file_id, caption=caption, parse_mode=ParseMode.MARKDOWN),
                    reply_markup=kb.as_markup(),
                )
            else:
                await bot.send_photo(
                    chat_id=callback.message.chat.id,
                    photo=file_id,
                    caption=caption,
                    reply_markup=kb.as_markup(),
                    parse_mode=ParseMode.MARKDOWN,
                )
        except Exception:
            await callback.message.edit_text(caption, reply_markup=kb.as_markup())
    else:
        await callback.message.edit_text(caption, reply_markup=kb.as_markup())


# ---- Admin: upload photos ---------------------------------------------------

@dp.message(F.photo & F.caption.regexp(r"^/photo\s+([a-z0-9\-]+)$"))
async def admin_photo_caption(message: Message) -> None:
    if not is_admin(message):
        await message.reply("–Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞.")
        return
    slug = re.findall(r"^/photo\s+([a-z0-9\-]+)$", message.caption.strip())[0]
    file_id = message.photo[-1].file_id
    await store.set_file_id(slug, file_id)
    await message.reply(f"üîê —Ñ–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è `{slug}`")


@dp.message(Command("photo"))
async def admin_photo_help(message: Message) -> None:
    if not is_admin(message):
        await message.reply("–Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞.")
        return
    await message.reply("–ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é `/photo <slug>`\n–Ω–∞–ø—Ä–∏–º–µ—Ä: `/photo polina-tikhonenko`")


# ---- Entry point ------------------------------------------------------------

async def main() -> None:
    await store.init()
    try:
        import uvloop  # type: ignore
        uvloop.install()
    except Exception:
        pass
    await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())


if __name__ == "__main__":
    asyncio.run(main())
