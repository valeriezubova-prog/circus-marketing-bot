"""
Entry point –¥–ª—è –±–æ—Ç–∞ ¬´–¶–∏—Ä–∫ –∏ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥¬ª.

HTML-—Ä–∞–∑–º–µ—Ç–∫–∞ –≤–º–µ—Å—Ç–æ Markdown ‚Äî —Ç–∞–∫ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–µ–µ —Ä–∞–±–æ—Ç–∞—é—Ç –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è
–≤ —Å—Å—ã–ª–∫–∞—Ö –∏ –Ω–µ ¬´—Å–ª–µ—Ç–∞—é—Ç¬ª –∑–≤—ë–∑–¥–æ—á–∫–∏/–∫—É—Ä—Å–∏–≤.
"""

import asyncio
import html
import os
import re
from typing import List

from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardMarkup,
    InputMediaPhoto,
    Message,
)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from dotenv import load_dotenv

from . import content
from .storage import PhotoStore

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_USERNAMES = {
    u.strip().lower() for u in os.getenv("ADMIN_USERNAMES", "").split(",") if u.strip()
}
STORAGE_PATH = os.getenv("STORAGE_PATH", "/data/bot.db")

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is not set")

# –í–ê–ñ–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º HTML –∫–∞–∫ parse_mode –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
store = PhotoStore(STORAGE_PATH)


# ---------- UI helpers ----------

def main_menu_kb() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text="üë• –õ—é–¥–∏", callback_data="menu:people")
    kb.button(text="üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data="menu:materials")
    kb.button(text="üìù –ö–∞–∫ —Å—Ç–∞–≤–∏—Ç—å –∑–∞–¥–∞—á–∏", callback_data="menu:tasking")
    kb.button(text="‚ùì FAQ", callback_data="menu:faq")
    kb.button(text="üîç –ü–æ–∏—Å–∫", callback_data="menu:search")
    kb.adjust(2, 2, 1)
    return kb.as_markup()


def people_list_kb() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    for slug, name, *_ in content.PEOPLE:
        kb.button(text=name, callback_data=f"person:{slug}")
    kb.button(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="menu:home")
    kb.adjust(1)
    return kb.as_markup()


def person_card_caption(
    name: str, title: str, desc: str, team: str, leader: str, tg_user: str
) -> str:
    """
    HTML-–ø–æ–¥–ø–∏—Å–∫–∞ –∫ –∫–∞—Ä—Ç–æ—á–∫–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.
    –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å—Ç—Ä–æ–∫–∏ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.
    """
    esc = html.escape
    parts = [
        f"<b>{esc(name)}</b>",
        f"<i>{esc(title)}</i>",
        "",
        esc(desc),
        "",
        f"<b>–ö–æ–º–∞–Ω–¥–∞:</b> {esc(team)}",
        f"<b>–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å:</b> {esc(leader)}",
        "",
        f'<a href="https://t.me/{tg_user}">–ù–∞–ø–∏—Å–∞—Ç—å –≤ Telegram</a>',
    ]
    return "\n".join(parts)


def faq_text() -> str:
    rows = ["<b>FAQ</b>"]
    for q, label, url in content.FAQ:
        rows.append(f"‚Ä¢ <b>{html.escape(q)}</b>\n  üëâ <a href=\"{url}\">{html.escape(label)}</a>")
    return "\n\n".join(rows)


def materials_text() -> str:
    rows = ["> –≤—Å—ë, —á—Ç–æ —á–∞—â–µ –≤—Å–µ–≥–æ –∏—â—É—Ç (–∏ —Å–ø—Ä–∞—à–∏–≤–∞—é—Ç —É –Ω–∞—Å –≤ –ø–∞–Ω–∏–∫–µ üî•):"]
    for label, url in content.MATERIALS:
        rows.append(f"‚Ä¢ <a href=\"{url}\">{html.escape(label)}</a>")
    return "\n".join(rows)


def tasking_text() -> str:
    return html.escape(content.TASKING_TEXT)


def search_people(query: str) -> List[str]:
    q = query.lower()
    hits: List[str] = []
    for slug, name, title, desc, team, leader, tg in content.PEOPLE:
        hay = " ".join([name, title, desc, team, leader, tg]).lower()
        if q in hay:
            hits.append(slug)
    return hits[:20]


def is_admin(msg: Message) -> bool:
    if not msg.from_user or not msg.from_user.username:
        return False
    return msg.from_user.username.lower() in ADMIN_USERNAMES


# ---------- Handlers ----------

@dp.message(Command("start"))
async def cmd_start(message: Message) -> None:
    await message.answer(
        f"<b>{html.escape(content.BOT_NAME)}</b>\n\n{html.escape(content.START_TEXT)}",
        reply_markup=main_menu_kb(),
    )


@dp.callback_query(F.data == "menu:home")
async def cb_home(callback: CallbackQuery) -> None:
    await callback.message.edit_text(
        f"<b>{html.escape(content.BOT_NAME)}</b>\n\n{html.escape(content.START_TEXT)}",
        reply_markup=main_menu_kb(),
    )


@dp.callback_query(F.data == "menu:people")
async def cb_people(callback: CallbackQuery) -> None:
    await callback.message.edit_text("–≤—ã–±–∏—Ä–∞–π –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:", reply_markup=people_list_kb())


@dp.callback_query(F.data == "menu:materials")
async def cb_materials(callback: CallbackQuery) -> None:
    kb = InlineKeyboardBuilder()
    kb.button(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="menu:home")
    await callback.message.edit_text(materials_text(), reply_markup=kb.as_markup())


@dp.callback_query(F.data == "menu:tasking")
async def cb_tasking(callback: CallbackQuery) -> None:
    kb = InlineKeyboardBuilder()
    kb.button(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="menu:home")
    await callback.message.edit_text(tasking_text(), reply_markup=kb.as_markup())


@dp.callback_query(F.data == "menu:faq")
async def cb_faq(callback: CallbackQuery) -> None:
    kb = InlineKeyboardBuilder()
    kb.button(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="menu:home")
    await callback.message.edit_text(faq_text(), reply_markup=kb.as_markup())


@dp.callback_query(F.data == "menu:search")
async def cb_search(callback: CallbackQuery) -> None:
    kb = InlineKeyboardBuilder()
    kb.button(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="menu:home")
    await callback.message.edit_text(
        "–Ω–∞–ø–∏—à–∏ –º–Ω–µ –∏–º—è, —Ä–æ–ª—å –∏–ª–∏ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ ‚Äî —è –Ω–∞–π–¥—É —á–µ–ª–æ–≤–µ–∫–∞. "
        "–§–æ—Ä–º–∞—Ç: <code>–ø–æ–∏—Å–∫ &lt;–∑–∞–ø—Ä–æ—Å&gt;</code>",
        reply_markup=kb.as_markup(),
    )


@dp.message(F.text.regexp(r"^\s*–ø–æ–∏—Å–∫\s+(.+)$"))
async def text_search(message: Message) -> None:
    query = re.findall(r"^\s*–ø–æ–∏—Å–∫\s+(.+)$", message.text, flags=re.I)[0]
    slugs = search_people(query)
    if not slugs:
        await message.answer(
            "–Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∞. –ø–æ–ø—Ä–æ–±—É–π –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ –ø–æ —Ä–æ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–±—Ä–µ–Ω–¥¬ª, ¬´—Ç—Ä–µ–π–¥¬ª, ¬´–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ¬ª)."
        )
        return
    kb = InlineKeyboardBuilder()
    for slug in slugs:
        name = next(p[1] for p in content.PEOPLE if p[0] == slug)
        kb.button(text=name, callback_data=f"person:{slug}")
    kb.button(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="menu:home")
    kb.adjust(1)
    await message.answer("–Ω–∞—à–ª–∞ –≤–æ—Ç —á—Ç–æ:", reply_markup=kb.as_markup())


# –°–≤–æ–±–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç ‚Äî –±—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–ª–æ–≤–∞
@dp.message(F.text.func(lambda t: isinstance(t, str)))
async def quick_replies(message: Message) -> None:
    t = message.text.lower()

    def matches(route: str) -> bool:
        return any(key in t for key in content.KEYWORD_ROUTES.get(route, set()))

    if matches("materials"):
        await message.answer(materials_text())
        return
    if matches("tasking"):
        await message.answer(tasking_text())
        return
    if matches("faq"):
        await message.answer(faq_text())
        return
    # –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ ‚Äî –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    # –Ω–æ —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª —Ñ–∏–¥–±–µ–∫:
    if re.fullmatch(r"\s*[–∞-—èa-z0-9 _\-]{1,32}\s*", t, flags=re.I):
        await message.answer(
            "—è –Ω–µ —É–≤–µ—Ä–µ–Ω–∞, —á—Ç–æ –ø–æ–Ω—è–ª–∞. –ú–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å ¬´–ø–æ–∏—Å–∫ –ò–≤–∞–Ω¬ª, "
            "–∏–ª–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–ª–æ–≤–∞: ¬´–≥–∞–π–¥¬ª, ¬´–±—Ä–µ–Ω–¥–±—É–∫¬ª, ¬´–ï–≤–∞¬ª, ¬´FAQ¬ª."
        )


@dp.callback_query(F.data.startswith("person:"))
async def cb_person(callback: CallbackQuery) -> None:
    slug = callback.data.split(":", 1)[1]
    person = next((p for p in content.PEOPLE if p[0] == slug), None)
    if not person:
        await callback.answer("–∫–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    _, name, title, desc, team, leader, tg_user = person
    caption = person_card_caption(name, title, desc, team, leader, tg_user)

    kb = InlineKeyboardBuilder()
    kb.button(text="‚¨ÖÔ∏è –õ—é–¥–∏", callback_data="menu:people")
    kb.button(text="üè† –í –º–µ–Ω—é", callback_data="menu:home")
    kb.adjust(2)

    file_id = await store.get_file_id(slug)
    if file_id:
        try:
            if callback.message.photo:
                await callback.message.edit_media(
                    InputMediaPhoto(media=file_id, caption=caption, parse_mode=ParseMode.HTML),
                    reply_markup=kb.as_markup(),
                )
            else:
                await bot.send_photo(
                    chat_id=callback.message.chat.id,
                    photo=file_id,
                    caption=caption,
                    reply_markup=kb.as_markup(),
                    parse_mode=ParseMode.HTML,
                )
        except Exception:
            await callback.message.edit_text(caption, reply_markup=kb.as_markup())
    else:
        await callback.message.edit_text(caption, reply_markup=kb.as_markup())


# ---------- Admin: –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ ----------

@dp.message(F.photo & F.caption.regexp(r"^/photo\s+([a-z0-9\-]+)$"))
async def admin_photo_caption(message: Message) -> None:
    if not is_admin(message):
        await message.reply("–Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞.")
        return
    slug = re.findall(r"^/photo\s+([a-z0-9\-]+)$", message.caption.strip())[0]
    file_id = message.photo[-1].file_id
    await store.set_file_id(slug, file_id)
    await message.reply(f"üîê —Ñ–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è <code>{html.escape(slug)}</code>")


@dp.message(Command("photo"))
async def admin_photo_help(message: Message) -> None:
    if not is_admin(message):
        await message.reply("–Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞.")
        return
    await message.reply(
        "–ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é <code>/photo &lt;slug&gt;</code>\n"
        "–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>/photo polina-tikhonenko</code>"
    )


# ---------- Run ----------

async def main() -> None:
    await store.init()
    try:
        import uvloop  # type: ignore
        uvloop.install()
    except Exception:
        pass
    await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())


if __name__ == "__main__":
    asyncio.run(main())
